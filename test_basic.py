#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import os
from utils import setup_roboflow_env, RoboflowManager, ImageProcessor
from ultralytics import YOLO

def test_environment():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
    api_key = os.getenv('ROBOFLOW_API_KEY')
    if api_key:
        print("‚úÖ API –∫–ª—é—á Roboflow –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ùå API –∫–ª—é—á Roboflow –ù–ï –Ω–∞–π–¥–µ–Ω")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: export ROBOFLOW_API_KEY='–≤–∞—à_–∫–ª—é—á'")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ YOLOv8
    try:
        model = YOLO('yolov8n.pt')  # –ó–∞–≥—Ä—É–∑–∏—Ç –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        print("‚úÖ YOLOv8 —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ YOLOv8: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenCV
    try:
        import cv2
        print(f"‚úÖ OpenCV –≤–µ—Ä—Å–∏—è: {cv2.__version__}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ OpenCV: {e}")

def test_yolo_detection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏—é —Å –ø–æ–º–æ—â—å—é YOLOv8 –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤...")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å YOLOv8
        model = YOLO('yolov8n.pt')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø—Ä–æ—Å—Ç–æ —Ü–≤–µ—Ç–Ω–æ–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫)
        import numpy as np
        import cv2
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        test_img = np.zeros((480, 640, 3), dtype=np.uint8)
        test_img[:] = (100, 150, 200)  # –ó–∞–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç–æ–º
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ñ–∏–≥—É—Ä—ã
        cv2.rectangle(test_img, (50, 50), (200, 200), (0, 255, 0), -1)
        cv2.circle(test_img, (400, 300), 80, (255, 0, 0), -1)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        cv2.imwrite('data/test_image.jpg', test_img)
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: data/test_image.jpg")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é
        results = model('data/test_image.jpg')
        print(f"‚úÖ –î–µ—Ç–µ–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(results[0].boxes) if results[0].boxes is not None else 0}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–µ–∫—Ü–∏–∏: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è —Å Roboflow\n")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs('data', exist_ok=True)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    test_environment()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é
    test_yolo_detection()
    
    print("\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ - –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Ä–µ–∞–ª—å–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏")
    print("2. –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
    print("3. –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Roboflow –ø–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ roboflow.com")

if __name__ == "__main__":
    main()