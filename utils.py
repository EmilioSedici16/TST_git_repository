"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è —Å Roboflow
"""

import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
from roboflow import Roboflow
from typing import Optional, Tuple, List, Dict, Any
import requests
from PIL import Image
import io


class RoboflowManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å Roboflow"""
    
    def __init__(self, api_key: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RoboflowManager
        
        Args:
            api_key: API –∫–ª—é—á Roboflow. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        """
        self.api_key = api_key or os.getenv('ROBOFLOW_API_KEY')
        if not self.api_key:
            print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: API –∫–ª—é—á Roboflow –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ROBOFLOW_API_KEY")
        else:
            self.rf = Roboflow(api_key=self.api_key)
    
    def get_project(self, workspace: str, project: str):
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –∏–∑ Roboflow"""
        try:
            return self.rf.workspace(workspace).project(project)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {e}")
            return None
    
    def download_dataset(self, workspace: str, project: str, version: int, format: str = "yolov8"):
        """–°–∫–∞—á–∞—Ç—å –¥–∞—Ç–∞—Å–µ—Ç –∏–∑ Roboflow"""
        try:
            project = self.get_project(workspace, project)
            if project:
                dataset = project.version(version).download(format)
                print(f"‚úÖ –î–∞—Ç–∞—Å–µ—Ç —Å–∫–∞—á–∞–Ω –≤: {dataset.location}")
                return dataset
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞: {e}")
            return None
    
    def get_model(self, workspace: str, project: str, version: int):
        """–ü–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –∏–∑ Roboflow"""
        try:
            project = self.get_project(workspace, project)
            if project:
                return project.version(version).model
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
            return None


class ImageProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    @staticmethod
    def load_image(image_path: str) -> Optional[np.ndarray]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        try:
            if image_path.startswith(('http://', 'https://')):
                response = requests.get(image_path)
                image = Image.open(io.BytesIO(response.content))
                return cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)
            else:
                return cv2.imread(image_path)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None
    
    @staticmethod
    def resize_image(image: np.ndarray, target_size: Tuple[int, int]) -> np.ndarray:
        """–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return cv2.resize(image, target_size)
    
    @staticmethod
    def draw_bboxes(image: np.ndarray, detections: List[Dict], class_names: Optional[List[str]] = None) -> np.ndarray:
        """
        –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–µ —Ä–∞–º–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        
        Args:
            image: –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            detections: –°–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–∫—Ü–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{'bbox': [x1, y1, x2, y2], 'confidence': float, 'class': int}]
            class_names: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–ª–∞—Å—Å–æ–≤
        """
        img_with_boxes = image.copy()
        
        for detection in detections:
            bbox = detection.get('bbox', [])
            confidence = detection.get('confidence', 0.0)
            class_id = detection.get('class', 0)
            
            if len(bbox) == 4:
                x1, y1, x2, y2 = map(int, bbox)
                
                # –¶–≤–µ—Ç —Ä–∞–º–∫–∏
                color = (0, 255, 0)  # –ó–µ–ª–µ–Ω—ã–π
                
                # –†–∏—Å—É–µ–º —Ä–∞–º–∫—É
                cv2.rectangle(img_with_boxes, (x1, y1), (x2, y2), color, 2)
                
                # –ü–æ–¥–ø–∏—Å—å
                label = f"Class {class_id}"
                if class_names and class_id < len(class_names):
                    label = class_names[class_id]
                label += f" {confidence:.2f}"
                
                # –†–∏—Å—É–µ–º —Ñ–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞
                (w, h), _ = cv2.getTextSize(label, cv2.FONT_HERSHEY_SIMPLEX, 0.6, 1)
                cv2.rectangle(img_with_boxes, (x1, y1 - 20), (x1 + w, y1), color, -1)
                
                # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
                cv2.putText(img_with_boxes, label, (x1, y1 - 5),
                           cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 1)
        
        return img_with_boxes
    
    @staticmethod
    def save_image(image: np.ndarray, output_path: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        try:
            cv2.imwrite(output_path, image)
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return False


class Visualizer:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    
    @staticmethod
    def plot_image_with_detections(image: np.ndarray, detections: List[Dict], 
                                 title: str = "–î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤", figsize: Tuple[int, int] = (12, 8)):
        """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –¥–µ—Ç–µ–∫—Ü–∏—è–º–∏"""
        plt.figure(figsize=figsize)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BGR –≤ RGB –¥–ª—è matplotlib
        image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        plt.imshow(image_rgb)
        plt.title(title)
        plt.axis('off')
        
        # –†–∏—Å—É–µ–º —Ä–∞–º–∫–∏
        for detection in detections:
            bbox = detection.get('bbox', [])
            confidence = detection.get('confidence', 0.0)
            class_id = detection.get('class', 0)
            
            if len(bbox) == 4:
                x1, y1, x2, y2 = bbox
                width = x2 - x1
                height = y2 - y1
                
                rect = plt.Rectangle((x1, y1), width, height, 
                                   fill=False, color='red', linewidth=2)
                plt.gca().add_patch(rect)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
                plt.text(x1, y1 - 10, f"Class {class_id}: {confidence:.2f}", 
                        color='red', fontsize=12, weight='bold')
        
        plt.tight_layout()
        plt.show()
    
    @staticmethod
    def plot_detection_stats(detections: List[Dict], class_names: Optional[List[str]] = None):
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–µ—Ç–µ–∫—Ü–∏–π"""
        if not detections:
            print("–ù–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return
        
        # –ü–æ–¥—Å—á–µ—Ç –∫–ª–∞—Å—Å–æ–≤
        class_counts = {}
        confidences = []
        
        for detection in detections:
            class_id = detection.get('class', 0)
            confidence = detection.get('confidence', 0.0)
            
            if class_names and class_id < len(class_names):
                class_name = class_names[class_id]
            else:
                class_name = f"Class {class_id}"
            
            class_counts[class_name] = class_counts.get(class_name, 0) + 1
            confidences.append(confidence)
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
        
        # –ì—Ä–∞—Ñ–∏–∫ –∫–ª–∞—Å—Å–æ–≤
        classes = list(class_counts.keys())
        counts = list(class_counts.values())
        ax1.bar(classes, counts)
        ax1.set_title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–∫—Ü–∏–π –ø–æ –∫–ª–∞—Å—Å–∞–º')
        ax1.set_xlabel('–ö–ª–∞—Å—Å—ã')
        ax1.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        ax1.tick_params(axis='x', rotation=45)
        
        # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        ax2.hist(confidences, bins=20, alpha=0.7, color='blue')
        ax2.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–µ—Ç–µ–∫—Ü–∏–π')
        ax2.set_xlabel('–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å')
        ax2.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
        
        plt.tight_layout()
        plt.show()


def setup_roboflow_env():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Roboflow"""
    api_key = os.getenv('ROBOFLOW_API_KEY')
    if not api_key:
        print("üîë –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Roboflow —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ API –∫–ª—é—á:")
        print("export ROBOFLOW_API_KEY='–≤–∞—à_api_–∫–ª—é—á'")
        print("\n–ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:")
        print("ROBOFLOW_API_KEY=–≤–∞—à_api_–∫–ª—é—á")
        return False
    else:
        print("‚úÖ API –∫–ª—é—á Roboflow –Ω–∞–π–¥–µ–Ω")
        return True


def create_sample_detection():
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä –¥–µ—Ç–µ–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return [
        {
            'bbox': [100, 100, 200, 200],
            'confidence': 0.95,
            'class': 0
        },
        {
            'bbox': [300, 150, 400, 250],
            'confidence': 0.87,
            'class': 1
        }
    ]


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    print("üîß –£—Ç–∏–ª–∏—Ç—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è —Å Roboflow")
    setup_roboflow_env()