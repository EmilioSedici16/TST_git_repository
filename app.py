#!/usr/bin/env python3
"""
–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ —Å Streamlit
"""

import streamlit as st
import cv2
import numpy as np
from PIL import Image
import io
from ultralytics import YOLO
from utils import ImageProcessor, RoboflowManager
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —Å Roboflow",
    page_icon="üîç",
    layout="wide"
)

@st.cache_resource
def load_model(model_name="yolov8n.pt"):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        model = YOLO(model_name)
        return model
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        return None

def process_image(image, model, confidence=0.5):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –¥–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤"""
    if model is None:
        return None, []
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PIL –≤ OpenCV —Ñ–æ—Ä–º–∞—Ç
    image_cv = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é
    results = model(image_cv, conf=confidence)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    detections = []
    for r in results:
        if r.boxes is not None:
            boxes = r.boxes.xyxy.cpu().numpy()
            confs = r.boxes.conf.cpu().numpy()
            classes = r.boxes.cls.cpu().numpy().astype(int)
            
            for box, conf, cls in zip(boxes, confs, classes):
                detections.append({
                    'bbox': box.tolist(),
                    'confidence': float(conf),
                    'class': int(cls)
                })
    
    # –†–∏—Å—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if detections:
        class_names = model.names if hasattr(model, 'names') else None
        result_image_cv = ImageProcessor.draw_bboxes(image_cv, detections, class_names)
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ RGB –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        result_image = cv2.cvtColor(result_image_cv, cv2.COLOR_BGR2RGB)
        result_image_pil = Image.fromarray(result_image)
        return result_image_pil, detections
    
    return image, detections

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("üîç –î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–º –∑—Ä–µ–Ω–∏–µ–º")
    st.markdown("### –ü—Ä–æ–µ–∫—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º YOLOv8 –∏ Roboflow")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    model_options = {
        "YOLOv8 Nano (–±—ã—Å—Ç—Ä–∞—è)": "yolov8n.pt",
        "YOLOv8 Small": "yolov8s.pt", 
        "YOLOv8 Medium": "yolov8m.pt",
        "YOLOv8 Large": "yolov8l.pt"
    }
    
    selected_model = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
        options=list(model_options.keys()),
        index=0
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    confidence = st.sidebar.slider(
        "–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:",
        min_value=0.1,
        max_value=1.0,
        value=0.5,
        step=0.05
    )
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Roboflow
    st.sidebar.markdown("---")
    st.sidebar.markdown("### ü§ñ Roboflow Integration")
    
    api_key = st.sidebar.text_input(
        "API –∫–ª—é—á Roboflow:",
        type="password",
        help="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á —Å roboflow.com"
    )
    
    if api_key:
        os.environ['ROBOFLOW_API_KEY'] = api_key
        st.sidebar.success("‚úÖ API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.header("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        
        # –í–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏
        upload_option = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏:",
            ["–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", "URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "–ü—Ä–∏–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"]
        )
        
        uploaded_image = None
        
        if upload_option == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª":
            uploaded_file = st.file_uploader(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:",
                type=['jpg', 'jpeg', 'png', 'bmp'],
                help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, BMP"
            )
            
            if uploaded_file is not None:
                uploaded_image = Image.open(uploaded_file)
        
        elif upload_option == "URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è":
            image_url = st.text_input(
                "–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
                placeholder="https://example.com/image.jpg"
            )
            
            if image_url:
                try:
                    import requests
                    response = requests.get(image_url)
                    uploaded_image = Image.open(io.BytesIO(response.content))
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        
        elif upload_option == "–ü—Ä–∏–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è":
            sample_images = {
                "–õ—é–¥–∏ –Ω–∞ —É–ª–∏—Ü–µ": "https://ultralytics.com/images/bus.jpg",
                "–ñ–∏–≤–æ—Ç–Ω—ã–µ": "https://ultralytics.com/images/dog.jpg", 
                "–ì–æ—Ä–æ–¥—Å–∫–∞—è —Å—Ü–µ–Ω–∞": "https://ultralytics.com/images/city.jpg"
            }
            
            selected_sample = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä:",
                options=list(sample_images.keys())
            )
            
            if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–º–µ—Ä"):
                try:
                    import requests
                    response = requests.get(sample_images[selected_sample])
                    uploaded_image = Image.open(io.BytesIO(response.content))
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–º–µ—Ä–∞: {e}")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if uploaded_image:
            st.subheader("–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:")
            st.image(uploaded_image, use_column_width=True)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            st.markdown(f"**–†–∞–∑–º–µ—Ä:** {uploaded_image.size[0]} x {uploaded_image.size[1]} –ø–∏–∫—Å–µ–ª–µ–π")
    
    with col2:
        st.header("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏")
        
        if uploaded_image:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
            with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏..."):
                model = load_model(model_options[selected_model])
            
            if model:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é
                with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."):
                    result_image, detections = process_image(uploaded_image, model, confidence)
                
                if result_image:
                    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏:")
                    st.image(result_image, use_column_width=True)
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                    st.metric("–ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤", len(detections))
                    
                    if detections:
                        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö
                        st.subheader("üè∑Ô∏è –ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:")
                        
                        class_names = model.names if hasattr(model, 'names') else {}
                        
                        for i, detection in enumerate(detections):
                            class_id = detection['class']
                            confidence_val = detection['confidence']
                            class_name = class_names.get(class_id, f"Class {class_id}")
                            
                            st.write(f"**{i+1}.** {class_name} - {confidence_val:.2%}")
                        
                        # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤
                        if len(detections) > 1:
                            st.subheader("üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤:")
                            
                            class_counts = {}
                            for detection in detections:
                                class_id = detection['class']
                                class_name = class_names.get(class_id, f"Class {class_id}")
                                class_counts[class_name] = class_counts.get(class_name, 0) + 1
                            
                            st.bar_chart(class_counts)
                    
                    # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    if result_image:
                        buf = io.BytesIO()
                        result_image.save(buf, format='PNG')
                        byte_im = buf.getvalue()
                        
                        st.download_button(
                            label="üíæ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                            data=byte_im,
                            file_name="detection_result.png",
                            mime="image/png"
                        )
        else:
            st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏")
    
    # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    st.markdown("---")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("### üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
        st.markdown("""
        - –î–µ—Ç–µ–∫—Ü–∏—è 80+ –∫–ª–∞—Å—Å–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤
        - –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Roboflow
        """)
    
    with col2:
        st.markdown("### üõ†Ô∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏")
        st.markdown("""
        - **YOLOv8** –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏
        - **Streamlit** –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        - **OpenCV** –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        - **Roboflow** –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏
        """)
    
    with col3:
        st.markdown("### üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
        st.markdown("""
        1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        3. –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        4. –°–∫–∞—á–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        """)

if __name__ == "__main__":
    main()